mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(pit = pit[n()])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2("lookup-pit-to-ID-Nov2021-v2.txt")
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Nov2021-v2.txt"))
View(tb_fish)
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(dnaID = dnaID[n()])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Nov2021-v2.txt"))
View(test)
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = dnaID[n()])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Nov2021-v2.txt"))
View(test)
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Nov2021-v2.txt"))
View(test)
tb <- tb_fish
tb_pit <- read_delim("lookup-pit-to-ID-Nov2021-v2.txt"=
tb_pit <- read_delim("lookup-pit-to-ID-Nov2021-v2.txt")
View(tb_pit)
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
View(tb_obs_pit)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit")
View(tb_obs_pit)
tb_pit <- read_delim("lookup-pit-to-ID-Feb2021-v1.txt")
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit")
View(tb_obs_pit)
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
View(tb_obs_pit)
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Nov2021-v2.txt"))
View(test)
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
View(test)
test2 <- tb_fish %>%
datepit_to_ID(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
a = test$ID != test2$ID
a = test$ID == test2$ID
a[F]
a[T]
test$ID[test$ID != test2$ID]
test$ID != test2$ID
test$ID[test$ID != test2$ID]
View(test)
View(test2)
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(is.na(date_pit) | date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[1])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
test2 <- tb_fish %>%
datepit_to_ID(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
test$ID[test$ID != test2$ID]
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(!is.na(date_pit)) %>%
filter(date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[1])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
test$ID[test$ID != test2$ID]
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(!is.na(date_pit))
View(tb_obs_pit)
tb_obs_pit %>% eiriktools::duplicates_find("observation")
View(test)
View(test)
tb_pit <- read_delim("lookup-pit-to-ID-Feb2021-v1.txt")
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(!is.na(date_pit)) %>%
filter(date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[1])
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit")
test$corr = test$ID == test2$ID
test %>% filter(corr==F) %>% view()
test %>% mutate(obs = row_number()) %>% filter(corr==F) %>% view()
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(!is.na(date_pit)) %>%
filter(date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
test$corr = test$ID == test2$ID
test %>% mutate(obs = row_number()) %>% filter(corr==F) %>% view()
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(!is.na(date_pit)) %>%
filter(date_pit <= date) %>%
arrange(date) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
View(tb_obs_pit)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(!is.na(date_pit))
#' @title datepit_to_ID
#' @description Function for obtaining the ID of an individual using columns date and pit. It takes in two tables, one to fill in (tb) and one to look up pit-tags from (tb_pit)
#' @param tb table to put ID's into (and get pit tags and dates from) must have columns "date" and "pit". Date should be formated as date-month-year or as a date value. The function's output will be this table plus a new "ID" column.
#' @param tb_pit a table that contains all known pit tags, their date of registration, and their corresponding ID. Date should be formated as data-month-year or as a date value.
#' @examples tb_fish_withID <- datepit_to_ID(tb_fish,tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to_ID(tb_pit)
#' @examples tb_fish_withID <- tb_fish %>% datepit_to-ID(read.table("pit date reference.txt",head=T))
#' @export
datepit_to_ID2 = function(tb, tb_pit){
require(lubridate)
# check that pit and date columns exist in the table
if (!"date" %in% colnames(tb)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb)) stop("pit column missing from tb")
if (!"date" %in% colnames(tb_pit)) stop("date column missing from tb")
if (!"pit" %in% colnames(tb_pit)) stop("pit column missing from tb")
# save the old date column in the tb before messing around with it
.oldDate <- tb$date
# format dates, if necessary
tb_pit$date <- ymd(tb_pit$date)
tb_pit <- tb_pit %>% rename(date_pit=date)
tb$date <- ymd(tb$date)
tb_obs_pit <-
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_pit,by="pit") %>%
filter(!is.na(date_pit)) %>%
filter(date_pit <= date) %>%
arrange(date_pit) %>%
group_by(observation) %>%
summarise(ID = ID[n()])
tb %>%
mutate(observation = row_number()) %>%
left_join(tb_obs_pit,by="observation") %>%
select(-observation)
}
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
test$corr = test$ID == test2$ID
test %>% mutate(obs = row_number()) %>% filter(corr==F) %>% view()
test <- tb_fish %>%
datepit_to_ID2(read_delim("lookup-pit-to-ID-Feb2021-v1.txt"))
test$corr = test$ID == test2$ID
test %>% filter(corr==F)
tb_datepit <- write_datepit_file(tb_fish,read_delim("lookup - lammisalmon fin clip matches 5.csv"))
#' @export
write_datepit_file <- function(tb, finclip_matches){
identify_fleeters <- function(tb_pits){
tb_lonely_measurements <-
tb_pits %>%
group_by(i_measurement) %>%
summarise(lonely = if_else(sum(!is.na(pit)) == 1 & is.na(dnaID),T,F))
# if first mention of pit is missing dnaID and another pit (is lonely), make fleeter
# alternatively, if a "pit_new" is lonely, also make fleeter
tb_pits %>%
left_join(tb_lonely_measurements,by="i_measurement") %>%
group_by(pit) %>%
arrange(date) %>%
filter(pit!="" & !is.na(pit)) %>%
mutate(
dnaID = ifelse((1:n())==1 & lonely, yes=glue::glue("Fleeter{date}{measOrder}"), no=dnaID),
dnaID = ifelse(i_pit == 2 & lonely, yes=glue::glue("Fleeter{date}{measOrder}"), no=dnaID)
) %>%
ungroup() %>%
select(-lonely)
}
# a table with where every record of a pit tag is one row
# incl. pit, date, i_measurement, dnaID (if any), pit_i
tf_pit_raw_long <-
tb %>%
clean_ID_df(column_name="dnaID",prefix="Offsp",numLength=4,keep_name=T,remove_NA=F) %>%
rename(
pit.1=pit,
pit.2=pit_new,
pit.3=pit_second,
pit.4=pit_third
) %>%
mutate(i_measurement = row_number()) %>%
pivot_longer(c(pit.1,pit.2,pit.3,pit.4),names_to="i_pit",values_to="pit") %>%
filter(!is.na(pit),nchar(pit)==23) %>%
identify_fleeters() %>%
select(pit, date, dnaID, i_pit,i_measurement)
# finclip matches
# keep only rows with a DNAID - and translate DNAID to ID_original
tf_pit_DNAID <-
tf_pit_raw_long %>%
filter(!is.na(dnaID), !is.na(pit)) %>%
lookup::lookup(
from = finclip_matches,
by.x = "dnaID",
by.y = "ID",
what = "ID_original",
overwrite = T,
overwriteNA = F
)
cycle <- function(tb_ID,tb_raw) {
tb_ID <-
tb_raw %>%
select(-c(dnaID)) %>%
filter(!is.na(pit),nchar(pit)==23) %>%
datepit_to_ID2(tb_ID) %>%
pivot_wider(names_from = i_pit, values_from=pit) %>% group_by(i_measurement) %>% summarise_all(function(x){x[!is.na(x)][1]}) %>%
pivot_longer(-c(date,ID,i_measurement),names_to="i_pit",values_to="pit") %>%
group_by(pit,i_pit,i_measurement) %>%
summarise(
date = ymd(date[1]),
ID = ID[1]
) %>%
filter(!is.na(ID),!is.na(pit)) %>%
group_by(ID,pit) %>%
summarise_all(function(x){x[!is.na(x)][1]}) %>%
ungroup()
}
tf_pit_ID <-
tf_pit_DNAID %>%
rename(ID=dnaID) %>%
cycle(tf_pit_raw_long) %>%
cycle(tf_pit_raw_long) %>%
cycle(tf_pit_raw_long) %>%
select(pit,date,ID)
return(tf_pit_ID)
}
tb_datepit <- write_datepit_file(tb_fish,read_delim("lookup - lammisalmon fin clip matches 5.csv"))
